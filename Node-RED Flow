[
    {
        "id": "e703d8df8ad3c424",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "64c562e50cc71d7c",
        "type": "mqtt in",
        "z": "e703d8df8ad3c424",
        "name": "",
        "topic": "v3/rfm9xlorawan@ttn/devices/+/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "18f8c829a7bfe596",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 180,
        "wires": [
            [
                "24dafde402c1c167"
            ]
        ]
    },
    {
        "id": "24dafde402c1c167",
        "type": "function",
        "z": "e703d8df8ad3c424",
        "name": "Unisci stringhe",
        "func": "if (\n    msg.payload['uplink_message'] &&\n    msg.payload['uplink_message']['decoded_payload'] &&\n    msg.payload['uplink_message']['decoded_payload']['hexString']\n) {\n    // Inizializza un array per raccogliere le stringhe esadecimali\n    if (!context.hexStrings) {\n        context.hexStrings = [];\n    }\n\n    // Inizializza la variabile per la stringa precedente\n    if (!context.previousHexString) {\n        context.previousHexString = '';\n    }\n\n    // Estrai la stringa esadecimale\n    let hexString = msg.payload['uplink_message']['decoded_payload']['hexString'];\n\n    // Controlla se la nuova stringa è diversa da quella precedente\n    if (hexString !== context.previousHexString) {\n        // Aggiungi la nuova stringa esadecimale alla lista\n        context.hexStrings.push(hexString);\n\n        // Aggiorna la stringa precedente\n        context.previousHexString = hexString;\n    }\n\n    // Unisci tutte le stringhe esadecimali\n    let combinedHex = context.hexStrings.join('').toLowerCase();\n\n    // Controlla se la stringa termina con \"ffd9\"\n    if (combinedHex.slice(-4) === 'ffd9') {\n        // Trova la posizione della prima occorrenza di \"ffd8\"\n        let index = combinedHex.indexOf('ffd8');\n\n        if (index !== -1) {\n            // Estrai dalla prima \"ffd8\" fino alla fine\n            let slicedHex = combinedHex.slice(index);\n\n            try {\n                // Converte la stringa esadecimale estratta in un buffer\n                let buffer = Buffer.from(slicedHex, 'hex');\n\n                // Converte il buffer in Base64\n                let base64String = buffer.toString('base64');\n\n                // Crea un messaggio HTML per l'immagine Base64\n                msg.payload = {\n                    image: `data:image/jpeg;base64,${base64String}`\n                };\n\n                // Resetta l'array delle stringhe per il prossimo ciclo\n                context.hexStrings = [];\n                context.previousHexString = '';\n\n                // Invia il messaggio al nodo ui_template\n                return msg;\n            } catch (e) {\n                node.error(\"Errore nella conversione del buffer: \" + e.message);\n                return null;\n            }\n        } else {\n            node.warn('Sequenza \"ffd8\" non trovata nella stringa combinata.');\n            return null;\n        }\n    } else {\n        // Se l'immagine non è ancora completa, non fare nulla\n        return null;\n    }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 180,
        "wires": [
            [
                "ecd5237ced0ca9ab"
            ]
        ]
    },
    {
        "id": "ecd5237ced0ca9ab",
        "type": "ui_template",
        "z": "e703d8df8ad3c424",
        "group": "d4fe94c48580bd7a",
        "name": "immagine ricevuta 1",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<div style=\"text-align:center;\">\n    <img src=\"{{msg.payload.image}}\" alt=\"Immagine\" large=\"1000%\" width=\"300\" />\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "18f8c829a7bfe596",
        "type": "mqtt-broker",
        "name": "Prova",
        "broker": "eu1.cloud.thethings.network",
        "port": "1883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d4fe94c48580bd7a",
        "type": "ui_group",
        "name": "Default",
        "tab": "9879b152908ce7e2",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9879b152908ce7e2",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
